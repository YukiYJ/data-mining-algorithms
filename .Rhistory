library(dplyr)
#PREPARE DATA IN USE
data_original <- read.csv("~/Google Drive/_DM/2_Assignments/Ass2/data_q3.csv", stringsAsFactors = FALSE)
#delete first column for this specific case becasue it is not a data record
data_original <- data_original[,2:length(colnames(data_original))]
#SET VALUE OF K
k <- 2
data <- data_original
#SET INITIAL CLUSTER CENTERS
centers <- data[0,]
#colnames(centers) <- colnames(data)
#for (i in 1:k){
#set first two record as initial centers
#centers[i,] <- data[i,]
#}
#Normalization
min1 <- min(data$B)
max1 <- max(data$B)
min2 <- min(data$C)
max2 <- max(data$C)
min3 <- min(data$D)
max3 <- max(data$D)
min4 <- min(data$E)
max4 <- max(data$E)
min5 <- min(data$F)
max5 <- max(data$F)
min6 <- min(data$G)
max6 <- max(data$G)
data_normalized <- data %>%
mutate(BN = (B - min1)/(max1-min1)) %>%
mutate(CN = (C - min2)/(max2-min2)) %>%
mutate(DN = (D - min3)/(max3-min3)) %>%
mutate(EN = (E - min4)/(max4-min4)) %>%
mutate(FN = (F - min5)/(max5-min5)) %>%
mutate(GN = (G - min6)/(max6-min6))
data_normalized<-data_normalized[,c(7,8,9,10,11,12)]
colnames(data_normalized) <- c("B","C","D","E","F","G")
data <- data_normalized
centers <- data[c(1,2),]
View(data)
distance <- function(vector1, vector2){
#Euclidean distance
#Input: two vectors of data with same length
#Input example: c(1,2,3); c(2,3,4)
count <- 0
for (i in 1:length(vector1)){
count = count + (vector1[i] - vector2[i])^2
}
count^(1/2)
}
assign <- function(objectsData, centersData){
#OUTPUT a data frame with new cluster information
#FOR EACH RECORDS
result <- objectsData %>%
mutate(cluster = NA)
for (i in 1:nrow(objectsData)){
whichCenter <- 0
currentMinDist <- -1
#COUNT DISSIMILARITY BETWEEN IT AND CENTERS
for (j in 1:nrow(centersData)){
distValue <- distance(
as.numeric(objectsData[i,]),
as.numeric(centersData[j,]))
if (distValue < currentMinDist || whichCenter == 0){
#FOUND CENTER WITH SMALLER DISSIMILARITY
whichCenter <- j
currentMinDist <- distValue
}
}
#SET THIS CENTER AS CLUSTER
result[i,"cluster"] <- whichCenter
}
result
}
update <- function(objectsData, centersData){
#INPUT  objectsData: the data frame with original data and corresponding cluster information
#INPUT  centersData: all last round data for all centers
#OUTPUT a data frame with new centers
#FOR EACH CENTER
result <- centersData
for (i in 1:nrow(centersData)){
#GET ALL NODES IN THIS CLUSTER
clusterData <- subset(objectsData, objectsData[,"cluster"] == i)
#CALCULATE MEAN FOR EACH FEATURE & UPDATE CENTERS
for (j in 1:ncol(centersData)){
result[i,j] <- mean(clusterData[,j])
}
}
result
}
View(centers)
data1 <- assign(data, centers)
data1
centers1 <- update(data1, centers)
centers1
View(data1)
data2 <- assign(data, centers)
data2
centers2 <- update(data2, centers)
centers2
View(centers1)
View(data2)
View(centers2)
data2 <- assign(data, centers1)
data2
centers2 <- update(data2, centers1)
centers2
View(data2)
View(centers2)
